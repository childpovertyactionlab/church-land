{"title":"Load Dallas County boundaries and transform CRS","markdown":{"yaml":{"pagetitle":"Church-Owned Vacant Properties","format":"html"},"headingText":"Load Dallas County boundaries and transform CRS","containsRefs":false,"markdown":"\n\n```{r setup, include=FALSE}\nlibrary(tidycensus)\nlibrary(dplyr)\nlibrary(sf)\nlibrary(tidyverse)\nlibrary(leaflet)\nlibrary(tigris)\nlibrary(DT)\nlibrary(leaflet.extras)\nlibrary(cpaltemplates)\nlibrary(cpaltools)\n\ndallas_co <- st_read(\"data/dallas_co.geojson\", quiet = TRUE)%>%\n  st_transform(crs = 4326)\n\n# Load ZCTA boundaries from a shapefile and transform CRS\nzctas <- st_read(\"data/ZCTA_DallasCo.geojson\", quiet = TRUE) %>%\n  st_transform(crs = 4326) %>%\n  filter(!is.na(GEOID10))\n\n# Load properties data from GeoJSON and transform CRS\nproperties <- st_read(\"data/fbown_properties.geojson\", quiet = TRUE) %>%\n  st_transform(crs = 4326) %>%\n  st_join(zctas, st_within) %>%\n  filter(!is.na(ACCOUNT_NUM))\n\n# Convert 'VacType' to a more readable format and store it in 'PropType'\n# and create a full property address\nproperties <- properties %>%\n  mutate(\n    PropType = factor(\n      case_when(\n        VacType == \"RES\" ~ \"Residential\",\n        VacType == \"COM\" ~ \"Commercial\",\n        VacType == \"IND\" ~ \"Industrial\",\n        VacType == \"RUR\" ~ \"Rural\",\n        TRUE ~ NA_character_\n      ),\n      levels = c(\"Residential\", \"Commercial\", \"Industrial\", \"Rural\")\n    ),\n    full_prop_address = paste(STREET_NUM, FULL_STREET_NAME, PROPERTY_CITY, \"TX\", PROPERTY_ZIPCODE, sep = \" \")\n  )\n\n# Calculate the property counts\ncount_properties <- scales::comma(n_distinct(properties$GIS_PARCEL_ID))\ncount_residential <- scales::comma(nrow(properties %>% filter(PropType == \"Residential\")))\ncount_commercial <- scales::comma(nrow(properties %>% filter(PropType == \"Commercial\")))\ncount_industrial <- scales::comma(nrow(properties %>% filter(PropType == \"Industrial\")))\ncount_rural <- scales::comma(nrow(properties %>% filter(PropType == \"Rural\")))\n\n\n# Define color palette for the map\nmap_palette <- c(\"Residential\" = \"#008097\", \"Commercial\" = \"#ED683F\", \"Industrial\" = \"#EACA2D\", \"Rural\" = \"#5C2B1C\")\n\n# Create a summary table by ZCTA\nzcta_summary <- properties %>%\n  group_by(ZCTA = ZCTA5CE10) %>%\n  summarise(\n    Total = n(),\n    Residential = sum(PropType == \"Residential\", na.rm = TRUE),\n    Commercial = sum(PropType == \"Commercial\", na.rm = TRUE),\n    Industrial = sum(PropType == \"Industrial\", na.rm = TRUE),\n    Rural = sum(PropType == \"Rural\", na.rm = TRUE)\n  ) %>%\n  mutate(Total = Residential + Commercial + Industrial + Rural) %>%\n  arrange(desc(Total)) %>%\n  slice_head(n = 5) # Select top 5 ZCTAs\n\n# Save this table for rendering in the right-side column\ntop_zctas_table <- DT::datatable(\n  zcta_summary,\n  rownames = FALSE,\n  colnames = c(\"ZCTA\", \"Total Properties\", \"Residential\", \"Commercial\", \"Industrial\", \"Rural\", \"Total\")\n)\n\n\n\n\n```\n\n::: column-screen-inset\n\n```{=html}\n<div class=\"mainboxbox\">\n<div class=\"mainbox\">\n```\n\n:::: {.card}\n\n```{=html}\n<div class=\"cardbox\">\n\n<div class=\"left-card-col dark-col\">\n```\n\n```{=html}\n  <div class=\"card-side\" style=\"width: 94%;\">\n```\n\n# There are `r count_properties` Church-Owned vacant parcels in Dallas County\n\n```{=html}\n    <div class=\"subtext\">\n      &#8212; Dallas County Appraisal District (DCAD)\n    </div>\n  </div>\n</div>\n```\n\n```{=html}\n<div class=\"right-card-col\">\n\n  <div style=\"width: 3%\">\n  </div>\n\n  <div class=\"card-side\">\n    \n    <h4>\n      <div class=\"rounded-outline\"><b>`r count_residential`</b></div> church-owned vacant parcels listed as <span style=\"color: #008097;\">Residential</span>\n    </h4>\n    <h4>\n      <div class=\"rounded-outline\"><b>`r count_commercial`</b></div> church-owned vacant parcels listed as <span style=\"color: #ED683F;\">Commercial</span>\n    </h4>\n    <h4>\n      <div class=\"rounded-outline\"><b>`r count_industrial`</b></div> church-owned vacant parcels listed as <span style=\"color: #bd9e0b;\">Industrial</span>\n    </h4>\n    <h4>\n      <div class=\"rounded-outline\"><b>`r count_rural`</b></div> church-owned vacant parcels listed as <span style=\"color: #5C2B1C;\">Rural</span>\n    </h4>\n\n  </div>\n</div>\n\n</div>\n\n```\n\n::::\n\n```{=html}\n\n<div class=\"mapscroll-container\">\n  <a href=\"javascript:void(0);\" class=\"scroll-link\" onclick=\"scrollToMap()\">\n      Click for map <i class=\"bi bi-chevron-down\"></i>\n  </a>\n</div>\n\n```\n\n```{r map}\n\n# Define the color palette, ensuring the order matches the factor levels of PropType\nmap_palette <- c(\n  \"Residential\" = \"#008097\",\n  \"Commercial\" = \"#ED683F\",\n  \"Industrial\" = \"#EACA2D\",\n  \"Rural\" = \"#5C2B1C\"\n)\n\n# Order the color palette to match the factor levels\nordered_palette <- setNames(map_palette[levels(properties$PropType)], levels(properties$PropType))\ncolor_mapping <- colorFactor(ordered_palette, levels(properties$PropType))\n\n# Create the map\n# Create the map with the specified base map\nm <- leaflet(data = properties, height = \"50vh\", width = \"100%\") %>%\n  addTiles(urlTemplate = cpaltemplates::cpal_mapbox_color, attribution = cpaltemplates::cpal_leaflet) %>%\n  addPolygons(\n    data = dallas_co,\n    fillColor = \"#333333\",\n    fillOpacity = 0.2,\n    weight = 1,\n    color = \"#333333\",\n    options = pathOptions(clickable = FALSE, interactive = FALSE)\n  )\n\n\n# Add markers for each property type with the correct colors from the ordered palette\nfor (type in levels(properties$PropType)) {\n  filtered_properties <- properties[properties$PropType == type, ]\n  m <- m %>%\n    addCircleMarkers(\n      data = filtered_properties,\n      group = type,\n      radius = 5,\n      stroke = FALSE,\n      fillColor = ~color_mapping(PropType),\n      fillOpacity = 0.7,\n      clusterOptions = markerClusterOptions(),\n      label = ~as.character(OWNER_NAME1),\n      popup = ~paste(OWNER_NAME1, BIZ_NAME, PropType, full_prop_address, sep = \"<br/>\")\n    )\n}\n\n# Add layers control\nm <- m %>%\n  addLayersControl(\n    overlayGroups = levels(properties$PropType),\n    options = layersControlOptions(collapsed = FALSE)\n  )\n\n# Add a legend that matches the colors used for markers\nm <- m %>%\n  addLegend(\n    position = \"bottomright\",\n    pal = colorFactor(ordered_palette, domain = levels(properties$PropType)),\n    values = levels(properties$PropType),\n    title = \"Property Type\",\n    opacity = 0.7\n  )\n\nm\n\n```\n\n```{=html}\n\n<script>\nfunction scrollToMap() {\n    const element = document.getElementById('property-map');\n    const headerOffset = 70; // height of your fixed header\n    const elementPosition = element.getBoundingClientRect().top;\n    const offsetPosition = elementPosition + window.pageYOffset - headerOffset;\n\n    window.scrollTo({\n        top: offsetPosition,\n        behavior: 'smooth'\n    });\n}\n</script>\n\n```\n\n\n```{=html}\n</div>\n</div>\n\n```\n\n:::"},"formats":{"html":{"execute":{"fig-width":9,"fig-height":7,"fig-format":"retina","fig-dpi":300,"df-print":"default","error":true,"eval":true,"cache":null,"freeze":false,"echo":false,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"toc-depth":3,"output-file":"index.html"},"language":{"code-summary":"Reveal Code"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.335","theme":"www/web_report.scss","toc-title":"Contents","toc-location":"right","anchor-sections":false,"code-copy":"hover","smooth-scroll":true,"grid":{"sidebar-width":"250px","body-width":"900px","margin-width":"300px"},"code-block-bg":true,"code-block-border-left":"#008097","message":false,"pagetitle":"Church-Owned Vacant Properties"},"extensions":{"book":{"multiFile":true}}}}}